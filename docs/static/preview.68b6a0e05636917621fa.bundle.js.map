{"version":3,"file":"static/preview.68b6a0e05636917621fa.bundle.js","sources":["webpack:///./src/radio-button/radio-button.component.ts"],"sourcesContent":["import { Component, forwardRef, Inject, Input, OnInit, Optional, ViewChild } from '@angular/core';\nimport {\n    AbstractControl,\n    ControlValueAccessor,\n    NG_VALIDATORS,\n    NG_VALUE_ACCESSOR,\n    NgModel,\n    ValidationErrors,\n    Validator\n} from '@angular/forms';\nimport { RadioButtonGroupComponent } from './radio-button-group.component';\n\n@Component({\n    selector: 'mm-radio-button',\n    template: `\n        <div class=\"mm-radiobutton\">\n            <input [type]=\"'radio'\"\n                   [attr.name]=\"name\"\n                   [id]=\"id\"\n                   [value]=\"value\"\n                   [(ngModel)]=\"model\"\n                   [checked]=\"checked\"\n                   [required]=\"required\"\n                   (change)=\"onChange()\"\n                   (blur)=\"onBlur()\"\n                   class=\"mm-radiobutton__field\">\n            <label [for]=\"id\" class=\"mm-label mm-radiobutton__label\" [innerHTML]=\"label\"></label>\n        </div>`,\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => RadioButtonComponent),\n            multi: true\n        },\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef(() => RadioButtonComponent),\n            multi: true\n        }\n    ]\n})\nexport class RadioButtonComponent implements OnInit, ControlValueAccessor, Validator {\n\n    /**\n     * The radio buttons name\n     */\n    @Input() public name: string;\n\n    /**\n     * The radio buttons id\n     */\n    @Input() public id: string;\n\n    /**\n     * The radio buttons value\n     */\n    @Input() public value: string = '';\n\n    /**\n     * The radio buttons required state\n     * Get the parent radio button groups required state if\n     * the internal required state is false and the parent\n     * radio button group exists.\n     */\n    @Input()\n    public get required(): boolean {\n        return (this._required || this.radioButtonGroup && this.radioButtonGroup.required);\n    }\n\n    public set required(value: boolean) {\n        this._required = value;\n    }\n\n    /**\n     * The radio buttons label\n     */\n    @Input() public label: string;\n\n    /**\n     * The radio buttons ngModel\n     */\n    public get model(): string {\n        return this._model;\n    }\n\n    public set model(value: string) {\n        this._model = value;\n\n        this.checked = (this.model === this.value);\n    }\n\n    /**\n     * The radio buttons checked state\n     */\n    @Input() public checked: boolean = false;\n\n    /**\n     * Propagate the change event\n     */\n    private propagateChange: Function;\n\n    /**\n     * Propagate the touched event\n     */\n    private propagateTouched: Function;\n\n    /**\n     * The ngModel instance of the radio button element\n     */\n    @ViewChild(NgModel) private radioButtonModel: NgModel;\n\n    /**\n     * The internal required state\n     * Gets read and set by TS getter/setters\n     */\n    private _model: string;\n\n    /**\n     * The internal required state\n     * Gets read and set by TS getter/setters\n     */\n    private _required: boolean = false;\n\n    /**\n     * @param [radioButtonGroup] - The parent radio button group\n     */\n    public constructor(@Optional() @Inject(forwardRef(() => RadioButtonGroupComponent))\n                       private radioButtonGroup: RadioButtonGroupComponent) {\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public ngOnInit() {\n\n        // Try to apply the parent radio button groups properties\n        if (this.radioButtonGroup) {\n            this.name = this.radioButtonGroup.name;\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public writeValue(value: string) {\n        this.model = value;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public registerOnChange(fn: Function) {\n        this.propagateChange = fn;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public registerOnTouched(fn: Function) {\n        this.propagateTouched = fn;\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public validate(c: AbstractControl): ValidationErrors | any {\n        if (!this.radioButtonModel.touched) {\n            return undefined;\n        }\n\n        return this.radioButtonModel.errors;\n    }\n\n    /**\n     * Propagates the changes to the parent form\n     */\n    public onChange() {\n        if (this.radioButtonGroup) {\n            this.radioButtonGroup.value = this.value;\n        }\n\n        if (!this.propagateChange) {\n            return;\n        }\n        this.propagateChange(this.value);\n    }\n\n    /**\n     * Mark the radio button as touched for the parent form\n     */\n    public onBlur() {\n        if (!this.propagateTouched) {\n            return;\n        }\n        this.propagateTouched();\n    }\n}\n"],"mappings":"AAAA","sourceRoot":""}